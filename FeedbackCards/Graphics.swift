//
//  Graphics.swift
//  Feedback Cards
//
//  Created by Jo Brunner on 29.12.16.
//  Copyright Â© 2016 mett.io. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Graphics: NSObject {
    
    
    //MARK: - Colors
    
    static let tintColor = UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1)
    static let vorbildColor = UIColor(hue: 0.385, saturation: 0.306, brightness: 0.576, alpha: 1)
    static let macherColor = UIColor(hue: 0.75, saturation: 0.446, brightness: 0.616, alpha: 1)
    static let mitspielerColor = UIColor(hue: 0.03, saturation: 0.587, brightness: 0.769, alpha: 1)
    static let padawanColor = UIColor(hue: 0.584, saturation: 0.42, brightness: 0.682, alpha: 1)
    static let zuschauerColor = UIColor(hue: 0.108, saturation: 0.755, brightness: 0.784, alpha: 1)
    static let enthalterColor = UIColor(white: 0.667, alpha: 1)
    
    
    //MARK: - Canvas Drawings
    
    /// Icon Library
    
    class func drawAppicon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 400), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 400, height: 400), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 400, y: resizedFrame.height / 400)
        
        /// Background Color
        UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Structure
        do {
            context.saveGState()
            context.translateBy(x: 25, y: 37)
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 198.25, y: 218.7))
            combinedShape.addCurve(to: CGPoint(x: 200, y: 200), controlPoint1: CGPoint(x: 199.4, y: 212.64), controlPoint2: CGPoint(x: 200, y: 206.39))
            combinedShape.addCurve(to: CGPoint(x: 174.57, y: 133.37), controlPoint1: CGPoint(x: 200, y: 174.41), controlPoint2: CGPoint(x: 190.38, y: 151.06))
            combinedShape.addLine(to: CGPoint(x: 217.16, y: 87.7))
            combinedShape.addCurve(to: CGPoint(x: 250, y: 100), controlPoint1: CGPoint(x: 225.94, y: 95.36), controlPoint2: CGPoint(x: 237.43, y: 100))
            combinedShape.addCurve(to: CGPoint(x: 300, y: 50), controlPoint1: CGPoint(x: 277.61, y: 100), controlPoint2: CGPoint(x: 300, y: 77.61))
            combinedShape.addCurve(to: CGPoint(x: 250, y: 0), controlPoint1: CGPoint(x: 300, y: 22.39), controlPoint2: CGPoint(x: 277.61, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 200, y: 50), controlPoint1: CGPoint(x: 222.39, y: 0), controlPoint2: CGPoint(x: 200, y: 22.39))
            combinedShape.addCurve(to: CGPoint(x: 210.3, y: 80.39), controlPoint1: CGPoint(x: 200, y: 61.43), controlPoint2: CGPoint(x: 203.84, y: 71.97))
            combinedShape.addLine(to: CGPoint(x: 167.53, y: 126.25))
            combinedShape.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 149.74, y: 109.95), controlPoint2: CGPoint(x: 126.03, y: 100))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 200), controlPoint1: CGPoint(x: 44.77, y: 100), controlPoint2: CGPoint(x: 0, y: 144.77))
            combinedShape.addCurve(to: CGPoint(x: 100, y: 300), controlPoint1: CGPoint(x: 0, y: 255.23), controlPoint2: CGPoint(x: 44.77, y: 300))
            combinedShape.addCurve(to: CGPoint(x: 195.9, y: 228.42), controlPoint1: CGPoint(x: 145.35, y: 300), controlPoint2: CGPoint(x: 183.66, y: 269.81))
            combinedShape.addLine(to: CGPoint(x: 250.63, y: 242.07))
            combinedShape.addCurve(to: CGPoint(x: 250, y: 250), controlPoint1: CGPoint(x: 250.21, y: 244.65), controlPoint2: CGPoint(x: 250, y: 247.3))
            combinedShape.addCurve(to: CGPoint(x: 300, y: 300), controlPoint1: CGPoint(x: 250, y: 277.61), controlPoint2: CGPoint(x: 272.39, y: 300))
            combinedShape.addCurve(to: CGPoint(x: 350, y: 250), controlPoint1: CGPoint(x: 327.61, y: 300), controlPoint2: CGPoint(x: 350, y: 277.61))
            combinedShape.addCurve(to: CGPoint(x: 300, y: 200), controlPoint1: CGPoint(x: 350, y: 222.39), controlPoint2: CGPoint(x: 327.61, y: 200))
            combinedShape.addCurve(to: CGPoint(x: 253.19, y: 232.4), controlPoint1: CGPoint(x: 278.58, y: 200), controlPoint2: CGPoint(x: 260.31, y: 213.47))
            combinedShape.addLine(to: CGPoint(x: 198.25, y: 218.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 300, y: 290))
            combinedShape.addCurve(to: CGPoint(x: 340, y: 250), controlPoint1: CGPoint(x: 322.09, y: 290), controlPoint2: CGPoint(x: 340, y: 272.09))
            combinedShape.addCurve(to: CGPoint(x: 300, y: 210), controlPoint1: CGPoint(x: 340, y: 227.91), controlPoint2: CGPoint(x: 322.09, y: 210))
            combinedShape.addCurve(to: CGPoint(x: 260, y: 250), controlPoint1: CGPoint(x: 277.91, y: 210), controlPoint2: CGPoint(x: 260, y: 227.91))
            combinedShape.addCurve(to: CGPoint(x: 300, y: 290), controlPoint1: CGPoint(x: 260, y: 272.09), controlPoint2: CGPoint(x: 277.91, y: 290))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 250, y: 90))
            combinedShape.addCurve(to: CGPoint(x: 290, y: 50), controlPoint1: CGPoint(x: 272.09, y: 90), controlPoint2: CGPoint(x: 290, y: 72.09))
            combinedShape.addCurve(to: CGPoint(x: 250, y: 10), controlPoint1: CGPoint(x: 290, y: 27.91), controlPoint2: CGPoint(x: 272.09, y: 10))
            combinedShape.addCurve(to: CGPoint(x: 210, y: 50), controlPoint1: CGPoint(x: 227.91, y: 10), controlPoint2: CGPoint(x: 210, y: 27.91))
            combinedShape.addCurve(to: CGPoint(x: 250, y: 90), controlPoint1: CGPoint(x: 210, y: 72.09), controlPoint2: CGPoint(x: 227.91, y: 90))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 100, y: 290))
            combinedShape.addCurve(to: CGPoint(x: 190, y: 200), controlPoint1: CGPoint(x: 149.71, y: 290), controlPoint2: CGPoint(x: 190, y: 249.71))
            combinedShape.addCurve(to: CGPoint(x: 100, y: 110), controlPoint1: CGPoint(x: 190, y: 150.29), controlPoint2: CGPoint(x: 149.71, y: 110))
            combinedShape.addCurve(to: CGPoint(x: 10, y: 200), controlPoint1: CGPoint(x: 50.29, y: 110), controlPoint2: CGPoint(x: 10, y: 150.29))
            combinedShape.addCurve(to: CGPoint(x: 100, y: 290), controlPoint1: CGPoint(x: 10, y: 249.71), controlPoint2: CGPoint(x: 50.29, y: 290))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 100, y: 290))
            context.saveGState()
            combinedShape.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Big Peer
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 187)
            
            /// Small Head Shape
            let smallHeadShape = UIBezierPath()
            smallHeadShape.move(to: CGPoint(x: 30, y: 60))
            smallHeadShape.addCurve(to: CGPoint(x: 60, y: 30), controlPoint1: CGPoint(x: 46.57, y: 60), controlPoint2: CGPoint(x: 60, y: 46.57))
            smallHeadShape.addCurve(to: CGPoint(x: 30, y: 0), controlPoint1: CGPoint(x: 60, y: 13.43), controlPoint2: CGPoint(x: 46.57, y: 0))
            smallHeadShape.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 13.43, y: 0), controlPoint2: CGPoint(x: 0, y: 13.43))
            smallHeadShape.addCurve(to: CGPoint(x: 30, y: 60), controlPoint1: CGPoint(x: 0, y: 46.57), controlPoint2: CGPoint(x: 13.43, y: 60))
            smallHeadShape.close()
            smallHeadShape.move(to: CGPoint(x: 30, y: 50))
            smallHeadShape.addCurve(to: CGPoint(x: 50, y: 30), controlPoint1: CGPoint(x: 41.05, y: 50), controlPoint2: CGPoint(x: 50, y: 41.05))
            smallHeadShape.addCurve(to: CGPoint(x: 30, y: 10), controlPoint1: CGPoint(x: 50, y: 18.95), controlPoint2: CGPoint(x: 41.05, y: 10))
            smallHeadShape.addCurve(to: CGPoint(x: 10, y: 30), controlPoint1: CGPoint(x: 18.95, y: 10), controlPoint2: CGPoint(x: 10, y: 18.95))
            smallHeadShape.addCurve(to: CGPoint(x: 30, y: 50), controlPoint1: CGPoint(x: 10, y: 41.05), controlPoint2: CGPoint(x: 18.95, y: 50))
            smallHeadShape.close()
            smallHeadShape.move(to: CGPoint(x: 30, y: 50))
            context.saveGState()
            context.translateBy(x: 20, y: 0)
            smallHeadShape.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            smallHeadShape.fill()
            context.restoreGState()
            
            /// Small Body Shape
            let smallBodyShape = UIBezierPath()
            smallBodyShape.move(to: CGPoint(x: 10, y: 74.98))
            smallBodyShape.addCurve(to: CGPoint(x: 10, y: 75.5), controlPoint1: CGPoint(x: 10, y: 75.32), controlPoint2: CGPoint(x: 10, y: 75.5))
            smallBodyShape.addCurve(to: CGPoint(x: 13.42, y: 76.34), controlPoint1: CGPoint(x: 10, y: 75.5), controlPoint2: CGPoint(x: 11.29, y: 75.82))
            smallBodyShape.addCurve(to: CGPoint(x: 50, y: 90), controlPoint1: CGPoint(x: 27.62, y: 81.95), controlPoint2: CGPoint(x: 48.25, y: 89.98))
            smallBodyShape.addCurve(to: CGPoint(x: 78.51, y: 80.08), controlPoint1: CGPoint(x: 51.44, y: 90.01), controlPoint2: CGPoint(x: 65.62, y: 84.87))
            smallBodyShape.addCurve(to: CGPoint(x: 90, y: 78), controlPoint1: CGPoint(x: 84.99, y: 78.93), controlPoint2: CGPoint(x: 90, y: 78))
            smallBodyShape.addCurve(to: CGPoint(x: 90, y: 75.78), controlPoint1: CGPoint(x: 90, y: 78), controlPoint2: CGPoint(x: 90, y: 77.19))
            smallBodyShape.addCurve(to: CGPoint(x: 100, y: 72), controlPoint1: CGPoint(x: 95.88, y: 73.57), controlPoint2: CGPoint(x: 100, y: 72))
            smallBodyShape.addLine(to: CGPoint(x: 100, y: 54))
            smallBodyShape.addCurve(to: CGPoint(x: 90, y: 10), controlPoint1: CGPoint(x: 100, y: 54), controlPoint2: CGPoint(x: 100, y: 20))
            smallBodyShape.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 80, y: 0), controlPoint2: CGPoint(x: 50, y: 0))
            smallBodyShape.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 50, y: 0), controlPoint2: CGPoint(x: 20, y: 0))
            smallBodyShape.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 0, y: 20), controlPoint2: CGPoint(x: 0, y: 50))
            smallBodyShape.addLine(to: CGPoint(x: 0, y: 71))
            smallBodyShape.addCurve(to: CGPoint(x: 10, y: 74.98), controlPoint1: CGPoint(x: 0, y: 71), controlPoint2: CGPoint(x: 4.12, y: 72.65))
            smallBodyShape.close()
            smallBodyShape.move(to: CGPoint(x: 10, y: 74.98))
            smallBodyShape.addCurve(to: CGPoint(x: 10, y: 40), controlPoint1: CGPoint(x: 10, y: 71.11), controlPoint2: CGPoint(x: 10, y: 46.54))
            smallBodyShape.addCurve(to: CGPoint(x: 53, y: 65), controlPoint1: CGPoint(x: 10, y: 35.97), controlPoint2: CGPoint(x: 47, y: 75.5))
            smallBodyShape.addCurve(to: CGPoint(x: 18, y: 17), controlPoint1: CGPoint(x: 59, y: 54.5), controlPoint2: CGPoint(x: 13.24, y: 21.76))
            smallBodyShape.addCurve(to: CGPoint(x: 50, y: 10), controlPoint1: CGPoint(x: 24.99, y: 10.01), controlPoint2: CGPoint(x: 50, y: 10))
            smallBodyShape.addCurve(to: CGPoint(x: 82, y: 15), controlPoint1: CGPoint(x: 50, y: 10), controlPoint2: CGPoint(x: 78.31, y: 10.64))
            smallBodyShape.addCurve(to: CGPoint(x: 90, y: 49), controlPoint1: CGPoint(x: 93, y: 28), controlPoint2: CGPoint(x: 90, y: 35))
            smallBodyShape.addCurve(to: CGPoint(x: 90, y: 75.78), controlPoint1: CGPoint(x: 90, y: 59.76), controlPoint2: CGPoint(x: 90, y: 71.1))
            smallBodyShape.addCurve(to: CGPoint(x: 78.51, y: 80.08), controlPoint1: CGPoint(x: 86.6, y: 77.06), controlPoint2: CGPoint(x: 82.62, y: 78.55))
            smallBodyShape.addCurve(to: CGPoint(x: 50, y: 84.5), controlPoint1: CGPoint(x: 67.63, y: 82.02), controlPoint2: CGPoint(x: 52.58, y: 84.6))
            smallBodyShape.addCurve(to: CGPoint(x: 13.42, y: 76.34), controlPoint1: CGPoint(x: 46.66, y: 84.37), controlPoint2: CGPoint(x: 22.48, y: 78.55))
            smallBodyShape.addCurve(to: CGPoint(x: 10, y: 74.98), controlPoint1: CGPoint(x: 12.23, y: 75.87), controlPoint2: CGPoint(x: 11.08, y: 75.41))
            smallBodyShape.close()
            smallBodyShape.move(to: CGPoint(x: 10, y: 74.98))
            context.saveGState()
            context.translateBy(x: 0, y: 60)
            smallBodyShape.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            smallBodyShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Small Peer
        do {
            context.saveGState()
            context.translateBy(x: 249, y: 62)
            
            /// Small Head Shape
            let smallHeadShape2 = UIBezierPath()
            smallHeadShape2.move(to: CGPoint(x: 15, y: 30))
            smallHeadShape2.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 23.28, y: 30), controlPoint2: CGPoint(x: 30, y: 23.28))
            smallHeadShape2.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 30, y: 6.72), controlPoint2: CGPoint(x: 23.28, y: 0))
            smallHeadShape2.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 6.72, y: 0), controlPoint2: CGPoint(x: 0, y: 6.72))
            smallHeadShape2.addCurve(to: CGPoint(x: 15, y: 30), controlPoint1: CGPoint(x: 0, y: 23.28), controlPoint2: CGPoint(x: 6.72, y: 30))
            smallHeadShape2.close()
            smallHeadShape2.move(to: CGPoint(x: 15, y: 25))
            smallHeadShape2.addCurve(to: CGPoint(x: 25, y: 15), controlPoint1: CGPoint(x: 20.52, y: 25), controlPoint2: CGPoint(x: 25, y: 20.52))
            smallHeadShape2.addCurve(to: CGPoint(x: 15, y: 5), controlPoint1: CGPoint(x: 25, y: 9.48), controlPoint2: CGPoint(x: 20.52, y: 5))
            smallHeadShape2.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 9.48, y: 5), controlPoint2: CGPoint(x: 5, y: 9.48))
            smallHeadShape2.addCurve(to: CGPoint(x: 15, y: 25), controlPoint1: CGPoint(x: 5, y: 20.52), controlPoint2: CGPoint(x: 9.48, y: 25))
            smallHeadShape2.close()
            smallHeadShape2.move(to: CGPoint(x: 15, y: 25))
            context.saveGState()
            context.translateBy(x: 10, y: 0)
            smallHeadShape2.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            smallHeadShape2.fill()
            context.restoreGState()
            
            /// Small Body Shape
            let smallBodyShape2 = UIBezierPath()
            smallBodyShape2.move(to: CGPoint(x: 45, y: 36.47))
            smallBodyShape2.addCurve(to: CGPoint(x: 45, y: 36.5), controlPoint1: CGPoint(x: 45, y: 36.49), controlPoint2: CGPoint(x: 45, y: 36.5))
            smallBodyShape2.addLine(to: CGPoint(x: 25, y: 35.75))
            smallBodyShape2.addLine(to: CGPoint(x: 0, y: 35.5))
            smallBodyShape2.addLine(to: CGPoint(x: 0, y: 25))
            smallBodyShape2.addCurve(to: CGPoint(x: 5, y: 5), controlPoint1: CGPoint(x: 0, y: 25), controlPoint2: CGPoint(x: 0, y: 10))
            smallBodyShape2.addCurve(to: CGPoint(x: 25, y: 0), controlPoint1: CGPoint(x: 10, y: 0), controlPoint2: CGPoint(x: 25, y: 0))
            smallBodyShape2.addCurve(to: CGPoint(x: 45, y: 5), controlPoint1: CGPoint(x: 25, y: 0), controlPoint2: CGPoint(x: 40, y: 0))
            smallBodyShape2.addCurve(to: CGPoint(x: 50, y: 27), controlPoint1: CGPoint(x: 50, y: 10), controlPoint2: CGPoint(x: 50, y: 27))
            smallBodyShape2.addLine(to: CGPoint(x: 50, y: 36))
            smallBodyShape2.addLine(to: CGPoint(x: 45, y: 35.95))
            smallBodyShape2.addCurve(to: CGPoint(x: 45, y: 24.5), controlPoint1: CGPoint(x: 45, y: 34.47), controlPoint2: CGPoint(x: 45, y: 30.13))
            smallBodyShape2.addCurve(to: CGPoint(x: 41, y: 7.5), controlPoint1: CGPoint(x: 45, y: 17.5), controlPoint2: CGPoint(x: 46.5, y: 14))
            smallBodyShape2.addCurve(to: CGPoint(x: 25, y: 5), controlPoint1: CGPoint(x: 39.15, y: 5.32), controlPoint2: CGPoint(x: 25, y: 5))
            smallBodyShape2.addCurve(to: CGPoint(x: 9, y: 8.5), controlPoint1: CGPoint(x: 25, y: 5), controlPoint2: CGPoint(x: 12.5, y: 5))
            smallBodyShape2.addCurve(to: CGPoint(x: 5, y: 23.06), controlPoint1: CGPoint(x: 3.5, y: 14), controlPoint2: CGPoint(x: 5, y: 19.5))
            smallBodyShape2.addCurve(to: CGPoint(x: 5, y: 35), controlPoint1: CGPoint(x: 5, y: 26.61), controlPoint2: CGPoint(x: 5, y: 35))
            smallBodyShape2.addLine(to: CGPoint(x: 25, y: 35.75))
            smallBodyShape2.addLine(to: CGPoint(x: 45, y: 35.95))
            smallBodyShape2.addCurve(to: CGPoint(x: 45, y: 35.95), controlPoint1: CGPoint(x: 45, y: 36.4), controlPoint2: CGPoint(x: 45, y: 36.22))
            smallBodyShape2.close()
            smallBodyShape2.move(to: CGPoint(x: 45, y: 36.47))
            context.saveGState()
            context.translateBy(x: 0, y: 30)
            smallBodyShape2.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            smallBodyShape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Small Peer
        do {
            context.saveGState()
            context.translateBy(x: 300, y: 261)
            
            /// Small Head Shape
            let smallHeadShape3 = UIBezierPath()
            smallHeadShape3.move(to: CGPoint(x: 15, y: 30))
            smallHeadShape3.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 23.28, y: 30), controlPoint2: CGPoint(x: 30, y: 23.28))
            smallHeadShape3.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 30, y: 6.72), controlPoint2: CGPoint(x: 23.28, y: 0))
            smallHeadShape3.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 6.72, y: 0), controlPoint2: CGPoint(x: 0, y: 6.72))
            smallHeadShape3.addCurve(to: CGPoint(x: 15, y: 30), controlPoint1: CGPoint(x: 0, y: 23.28), controlPoint2: CGPoint(x: 6.72, y: 30))
            smallHeadShape3.close()
            smallHeadShape3.move(to: CGPoint(x: 15, y: 25))
            smallHeadShape3.addCurve(to: CGPoint(x: 25, y: 15), controlPoint1: CGPoint(x: 20.52, y: 25), controlPoint2: CGPoint(x: 25, y: 20.52))
            smallHeadShape3.addCurve(to: CGPoint(x: 15, y: 5), controlPoint1: CGPoint(x: 25, y: 9.48), controlPoint2: CGPoint(x: 20.52, y: 5))
            smallHeadShape3.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 9.48, y: 5), controlPoint2: CGPoint(x: 5, y: 9.48))
            smallHeadShape3.addCurve(to: CGPoint(x: 15, y: 25), controlPoint1: CGPoint(x: 5, y: 20.52), controlPoint2: CGPoint(x: 9.48, y: 25))
            smallHeadShape3.close()
            smallHeadShape3.move(to: CGPoint(x: 15, y: 25))
            context.saveGState()
            context.translateBy(x: 10, y: 0)
            smallHeadShape3.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            smallHeadShape3.fill()
            context.restoreGState()
            
            /// Small Body Shape
            let smallBodyShape3 = UIBezierPath()
            smallBodyShape3.move(to: CGPoint(x: 45, y: 36.47))
            smallBodyShape3.addCurve(to: CGPoint(x: 45, y: 36.5), controlPoint1: CGPoint(x: 45, y: 36.49), controlPoint2: CGPoint(x: 45, y: 36.5))
            smallBodyShape3.addLine(to: CGPoint(x: 25, y: 35.75))
            smallBodyShape3.addLine(to: CGPoint(x: 0, y: 35.5))
            smallBodyShape3.addLine(to: CGPoint(x: 0, y: 25))
            smallBodyShape3.addCurve(to: CGPoint(x: 5, y: 5), controlPoint1: CGPoint(x: 0, y: 25), controlPoint2: CGPoint(x: 0, y: 10))
            smallBodyShape3.addCurve(to: CGPoint(x: 25, y: 0), controlPoint1: CGPoint(x: 10, y: 0), controlPoint2: CGPoint(x: 25, y: 0))
            smallBodyShape3.addCurve(to: CGPoint(x: 45, y: 5), controlPoint1: CGPoint(x: 25, y: 0), controlPoint2: CGPoint(x: 40, y: 0))
            smallBodyShape3.addCurve(to: CGPoint(x: 50, y: 27), controlPoint1: CGPoint(x: 50, y: 10), controlPoint2: CGPoint(x: 50, y: 27))
            smallBodyShape3.addLine(to: CGPoint(x: 50, y: 36))
            smallBodyShape3.addLine(to: CGPoint(x: 45, y: 35.95))
            smallBodyShape3.addCurve(to: CGPoint(x: 45, y: 24.5), controlPoint1: CGPoint(x: 45, y: 34.47), controlPoint2: CGPoint(x: 45, y: 30.13))
            smallBodyShape3.addCurve(to: CGPoint(x: 41, y: 7.5), controlPoint1: CGPoint(x: 45, y: 17.5), controlPoint2: CGPoint(x: 46.5, y: 14))
            smallBodyShape3.addCurve(to: CGPoint(x: 25, y: 5), controlPoint1: CGPoint(x: 39.15, y: 5.32), controlPoint2: CGPoint(x: 25, y: 5))
            smallBodyShape3.addCurve(to: CGPoint(x: 9, y: 8.5), controlPoint1: CGPoint(x: 25, y: 5), controlPoint2: CGPoint(x: 12.5, y: 5))
            smallBodyShape3.addCurve(to: CGPoint(x: 5, y: 23.06), controlPoint1: CGPoint(x: 3.5, y: 14), controlPoint2: CGPoint(x: 5, y: 19.5))
            smallBodyShape3.addCurve(to: CGPoint(x: 5, y: 35), controlPoint1: CGPoint(x: 5, y: 26.61), controlPoint2: CGPoint(x: 5, y: 35))
            smallBodyShape3.addLine(to: CGPoint(x: 25, y: 35.75))
            smallBodyShape3.addLine(to: CGPoint(x: 45, y: 35.95))
            smallBodyShape3.addCurve(to: CGPoint(x: 45, y: 35.95), controlPoint1: CGPoint(x: 45, y: 36.4), controlPoint2: CGPoint(x: 45, y: 36.22))
            smallBodyShape3.close()
            smallBodyShape3.move(to: CGPoint(x: 45, y: 36.47))
            context.saveGState()
            context.translateBy(x: 0, y: 30)
            smallBodyShape3.usesEvenOddFillRule = true
            UIColor(hue: 0.756, saturation: 0.675, brightness: 0.976, alpha: 1).setFill()
            smallBodyShape3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawEnthalter2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Path
        let path = UIBezierPath()
        path.move(to: CGPoint(x: 1.66, y: 27.66))
        path.addCurve(to: CGPoint(x: 64, y: 68), controlPoint1: CGPoint(x: 11.9, y: -2.53), controlPoint2: CGPoint(x: 40.26, y: 73.23))
        path.addCurve(to: CGPoint(x: 118, y: 0), controlPoint1: CGPoint(x: 87.74, y: 62.77), controlPoint2: CGPoint(x: 218, y: 0))
        path.addCurve(to: CGPoint(x: 141.82, y: 42.41), controlPoint1: CGPoint(x: 18, y: 0), controlPoint2: CGPoint(x: 133.83, y: 22.82))
        path.addCurve(to: CGPoint(x: 28, y: 107.51), controlPoint1: CGPoint(x: 149.81, y: 62), controlPoint2: CGPoint(x: 24.33, y: 98.95))
        path.addCurve(to: CGPoint(x: 180.86, y: 107.51), controlPoint1: CGPoint(x: 31.67, y: 116.06), controlPoint2: CGPoint(x: 172.94, y: 88.6))
        path.addCurve(to: CGPoint(x: 144.06, y: 128.21), controlPoint1: CGPoint(x: 188.78, y: 126.42), controlPoint2: CGPoint(x: 153.06, y: 112.16))
        path.addCurve(to: CGPoint(x: 146.3, y: 169.18), controlPoint1: CGPoint(x: 135.07, y: 144.26), controlPoint2: CGPoint(x: 180.57, y: 156.76))
        path.addCurve(to: CGPoint(x: 70.46, y: 164.3), controlPoint1: CGPoint(x: 112.03, y: 181.61), controlPoint2: CGPoint(x: 90.55, y: 166.31))
        path.addCurve(to: CGPoint(x: 124, y: 128.21), controlPoint1: CGPoint(x: 50.37, y: 162.29), controlPoint2: CGPoint(x: 139.67, y: 155.66))
        path.addCurve(to: CGPoint(x: 18.94, y: 89.37), controlPoint1: CGPoint(x: 108.33, y: 100.76), controlPoint2: CGPoint(x: 9.28, y: 104.93))
        path.addCurve(to: CGPoint(x: 75.26, y: 88.69), controlPoint1: CGPoint(x: 28.6, y: 73.8), controlPoint2: CGPoint(x: 59.38, y: 82.79))
        path.addCurve(to: CGPoint(x: 98.3, y: 118.88), controlPoint1: CGPoint(x: 91.14, y: 94.6), controlPoint2: CGPoint(x: 88.56, y: 121.92))
        path.addCurve(to: CGPoint(x: 92, y: 82.66), controlPoint1: CGPoint(x: 108.04, y: 115.83), controlPoint2: CGPoint(x: 101.35, y: 100.79))
        path.addCurve(to: CGPoint(x: 98.3, y: 48.35), controlPoint1: CGPoint(x: 82.64, y: 64.53), controlPoint2: CGPoint(x: 123.15, y: 53.86))
        path.addCurve(to: CGPoint(x: 11.9, y: 55.16), controlPoint1: CGPoint(x: 73.45, y: 42.84), controlPoint2: CGPoint(x: -9.01, y: 82.66))
        path.addCurve(to: CGPoint(x: 1.66, y: 27.66), controlPoint1: CGPoint(x: 32.81, y: 27.65), controlPoint2: CGPoint(x: -8.58, y: 57.84))
        path.close()
        path.move(to: CGPoint(x: 1.66, y: 27.66))
        context.saveGState()
        context.translateBy(x: 9, y: 16)
        path.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        path.fill()
        path.lineWidth = 1
        UIColor.black.setStroke()
        path.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawZuschauer2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Path
        let path = UIBezierPath()
        path.move(to: CGPoint(x: 0.98, y: 33.66))
        path.addCurve(to: CGPoint(x: 63.71, y: 3.47), controlPoint1: CGPoint(x: 11.22, y: 3.47), controlPoint2: CGPoint(x: 39.96, y: 8.7))
        path.addCurve(to: CGPoint(x: 113.63, y: 8.84), controlPoint1: CGPoint(x: 87.45, y: -1.76), controlPoint2: CGPoint(x: 95.1, y: -1.91))
        path.addCurve(to: CGPoint(x: 180.19, y: 14.5), controlPoint1: CGPoint(x: 132.16, y: 19.59), controlPoint2: CGPoint(x: 172.2, y: -5.09))
        path.addCurve(to: CGPoint(x: 147.55, y: 92.01), controlPoint1: CGPoint(x: 188.18, y: 34.09), controlPoint2: CGPoint(x: 143.88, y: 83.46))
        path.addCurve(to: CGPoint(x: 180.19, y: 113.51), controlPoint1: CGPoint(x: 151.22, y: 100.56), controlPoint2: CGPoint(x: 172.27, y: 94.6))
        path.addCurve(to: CGPoint(x: 54.33, y: 133.5), controlPoint1: CGPoint(x: 188.11, y: 132.42), controlPoint2: CGPoint(x: 63.32, y: 117.45))
        path.addCurve(to: CGPoint(x: 145.63, y: 175.18), controlPoint1: CGPoint(x: 45.33, y: 149.55), controlPoint2: CGPoint(x: 179.9, y: 162.76))
        path.addCurve(to: CGPoint(x: 69.79, y: 170.3), controlPoint1: CGPoint(x: 111.36, y: 187.61), controlPoint2: CGPoint(x: 89.88, y: 172.31))
        path.addCurve(to: CGPoint(x: 31.71, y: 163.78), controlPoint1: CGPoint(x: 49.69, y: 168.29), controlPoint2: CGPoint(x: 47.38, y: 191.23))
        path.addCurve(to: CGPoint(x: 4.83, y: 144), controlPoint1: CGPoint(x: 16.03, y: 136.33), controlPoint2: CGPoint(x: -4.84, y: 159.57))
        path.addCurve(to: CGPoint(x: 11.22, y: 113.51), controlPoint1: CGPoint(x: 14.49, y: 128.43), controlPoint2: CGPoint(x: -4.66, y: 107.6))
        path.addCurve(to: CGPoint(x: 31.71, y: 92.01), controlPoint1: CGPoint(x: 27.11, y: 119.41), controlPoint2: CGPoint(x: 21.97, y: 95.06))
        path.addCurve(to: CGPoint(x: 91.33, y: 88.66), controlPoint1: CGPoint(x: 41.45, y: 88.97), controlPoint2: CGPoint(x: 100.68, y: 106.79))
        path.addCurve(to: CGPoint(x: 139.33, y: 39), controlPoint1: CGPoint(x: 81.97, y: 70.53), controlPoint2: CGPoint(x: 164.18, y: 44.51))
        path.addCurve(to: CGPoint(x: 43.33, y: 39), controlPoint1: CGPoint(x: 114.48, y: 33.49), controlPoint2: CGPoint(x: 22.42, y: 66.5))
        path.addCurve(to: CGPoint(x: 0.98, y: 33.66), controlPoint1: CGPoint(x: 64.23, y: 11.5), controlPoint2: CGPoint(x: -9.26, y: 63.84))
        path.close()
        path.move(to: CGPoint(x: 0.98, y: 33.66))
        context.saveGState()
        context.translateBy(x: 9.67, y: 10)
        path.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        path.fill()
        path.lineWidth = 1
        UIColor.black.setStroke()
        path.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawPadawan2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 6.04, y: 39.09))
        combinedShape.addCurve(to: CGPoint(x: 6.04, y: 155.59), controlPoint1: CGPoint(x: -5.12, y: 98.37), controlPoint2: CGPoint(x: 1.81, y: 137.98))
        combinedShape.addCurve(to: CGPoint(x: 43.04, y: 164.59), controlPoint1: CGPoint(x: 10.27, y: 173.19), controlPoint2: CGPoint(x: 31.15, y: 180.93))
        combinedShape.addCurve(to: CGPoint(x: 46.04, y: 100.59), controlPoint1: CGPoint(x: 54.93, y: 148.24), controlPoint2: CGPoint(x: 38.29, y: 114.8))
        combinedShape.addCurve(to: CGPoint(x: 84.04, y: 108.09), controlPoint1: CGPoint(x: 53.8, y: 86.37), controlPoint2: CGPoint(x: 58.43, y: 115.93))
        combinedShape.addCurve(to: CGPoint(x: 132.54, y: 74.09), controlPoint1: CGPoint(x: 109.65, y: 100.24), controlPoint2: CGPoint(x: 119.56, y: 89.3))
        combinedShape.addCurve(to: CGPoint(x: 140.04, y: 25.09), controlPoint1: CGPoint(x: 145.52, y: 58.87), controlPoint2: CGPoint(x: 151.59, y: 41.79))
        combinedShape.addCurve(to: CGPoint(x: 90.04, y: 12.59), controlPoint1: CGPoint(x: 128.5, y: 8.38), controlPoint2: CGPoint(x: 118, y: 16.66))
        combinedShape.addCurve(to: CGPoint(x: 74.04, y: 4.59), controlPoint1: CGPoint(x: 62.08, y: 8.52), controlPoint2: CGPoint(x: 87.18, y: 3.22))
        combinedShape.addCurve(to: CGPoint(x: 6.04, y: 39.09), controlPoint1: CGPoint(x: 60.91, y: 5.96), controlPoint2: CGPoint(x: 17.21, y: -20.2))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 51.04, y: 34.59))
        combinedShape.addCurve(to: CGPoint(x: 105.04, y: 39.59), controlPoint1: CGPoint(x: 64.48, y: 26.8), controlPoint2: CGPoint(x: 96.76, y: 33.76))
        combinedShape.addCurve(to: CGPoint(x: 91.54, y: 63.09), controlPoint1: CGPoint(x: 113.33, y: 45.42), controlPoint2: CGPoint(x: 105.56, y: 54.97))
        combinedShape.addCurve(to: CGPoint(x: 51.54, y: 70.59), controlPoint1: CGPoint(x: 77.53, y: 71.21), controlPoint2: CGPoint(x: 62.99, y: 78.64))
        combinedShape.addCurve(to: CGPoint(x: 51.04, y: 34.59), controlPoint1: CGPoint(x: 40.1, y: 62.53), controlPoint2: CGPoint(x: 37.6, y: 42.37))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 51.04, y: 34.59))
        context.saveGState()
        context.translateBy(x: 25.96, y: 8.41)
        combinedShape.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        combinedShape.fill()
        combinedShape.lineWidth = 1
        UIColor.black.setStroke()
        combinedShape.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawMitspieler2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Path 4
        let path4 = UIBezierPath()
        path4.move(to: CGPoint(x: 170.3, y: 16.27))
        path4.addCurve(to: CGPoint(x: 44.33, y: 4.7), controlPoint1: CGPoint(x: 170.3, y: -11.5), controlPoint2: CGPoint(x: 44.33, y: 4.7))
        path4.addCurve(to: CGPoint(x: 18.62, y: 30.15), controlPoint1: CGPoint(x: 44.33, y: 4.7), controlPoint2: CGPoint(x: 26.82, y: 11.06))
        path4.addCurve(to: CGPoint(x: 6.58, y: 75.86), controlPoint1: CGPoint(x: 10.41, y: 49.25), controlPoint2: CGPoint(x: 6.58, y: 56.77))
        path4.addCurve(to: CGPoint(x: 30.65, y: 101.61), controlPoint1: CGPoint(x: 6.58, y: 94.95), controlPoint2: CGPoint(x: -6.31, y: 106.82))
        path4.addCurve(to: CGPoint(x: 68.4, y: 101.61), controlPoint1: CGPoint(x: 67.61, y: 96.41), controlPoint2: CGPoint(x: 53.09, y: 121.86))
        path4.addCurve(to: CGPoint(x: 118.74, y: 70.61), controlPoint1: CGPoint(x: 83.72, y: 81.37), controlPoint2: CGPoint(x: 94.67, y: 56.15))
        path4.addCurve(to: CGPoint(x: 147.19, y: 96.11), controlPoint1: CGPoint(x: 142.81, y: 85.08), controlPoint2: CGPoint(x: 147.19, y: 73.54))
        path4.addCurve(to: CGPoint(x: 118.74, y: 122.14), controlPoint1: CGPoint(x: 147.19, y: 118.67), controlPoint2: CGPoint(x: 140.62, y: 116.36))
        path4.addCurve(to: CGPoint(x: 68.4, y: 153.11), controlPoint1: CGPoint(x: 96.85, y: 127.93), controlPoint2: CGPoint(x: 88.1, y: 153.11))
        path4.addCurve(to: CGPoint(x: 6.58, y: 133.13), controlPoint1: CGPoint(x: 48.71, y: 153.11), controlPoint2: CGPoint(x: 31.86, y: 138.65))
        path4.addCurve(to: CGPoint(x: 63.48, y: 183.47), controlPoint1: CGPoint(x: -18.7, y: 127.61), controlPoint2: CGPoint(x: 35.03, y: 189.83))
        path4.addCurve(to: CGPoint(x: 131.3, y: 159.61), controlPoint1: CGPoint(x: 91.93, y: 177.1), controlPoint2: CGPoint(x: 118.17, y: 159.61))
        path4.addCurve(to: CGPoint(x: 165.24, y: 144.13), controlPoint1: CGPoint(x: 144.43, y: 159.61), controlPoint2: CGPoint(x: 155.4, y: 166.11))
        path4.addCurve(to: CGPoint(x: 183.3, y: 82.8), controlPoint1: CGPoint(x: 175.09, y: 122.14), controlPoint2: CGPoint(x: 183.3, y: 104.21))
        path4.addCurve(to: CGPoint(x: 165.24, y: 57.11), controlPoint1: CGPoint(x: 183.3, y: 61.39), controlPoint2: CGPoint(x: 189.32, y: 57.11))
        path4.addCurve(to: CGPoint(x: 88.1, y: 38.25), controlPoint1: CGPoint(x: 141.17, y: 57.11), controlPoint2: CGPoint(x: 107.8, y: 23.79))
        path4.addCurve(to: CGPoint(x: 68.4, y: 57.11), controlPoint1: CGPoint(x: 68.4, y: 52.72), controlPoint2: CGPoint(x: 70.05, y: 71.58))
        path4.addCurve(to: CGPoint(x: 58.01, y: 37.67), controlPoint1: CGPoint(x: 66.76, y: 42.65), controlPoint2: CGPoint(x: 47.61, y: 51.56))
        path4.addCurve(to: CGPoint(x: 100.14, y: 16.27), controlPoint1: CGPoint(x: 68.4, y: 23.79), controlPoint2: CGPoint(x: 83.18, y: 16.27))
        path4.addCurve(to: CGPoint(x: 170.3, y: 16.27), controlPoint1: CGPoint(x: 117.1, y: 16.27), controlPoint2: CGPoint(x: 170.3, y: 44.04))
        path4.close()
        path4.move(to: CGPoint(x: 170.3, y: 16.27))
        context.saveGState()
        context.translateBy(x: 5.7, y: 10.89)
        path4.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        path4.fill()
        path4.lineWidth = 1
        UIColor.black.setStroke()
        path4.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawMacher2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Path
        let path = UIBezierPath()
        path.move(to: CGPoint(x: 14.03, y: 6.66))
        path.addCurve(to: CGPoint(x: 93.14, y: 53.81), controlPoint1: CGPoint(x: 24.27, y: -23.53), controlPoint2: CGPoint(x: 69.39, y: 59.04))
        path.addCurve(to: CGPoint(x: 171.64, y: 14.16), controlPoint1: CGPoint(x: 116.88, y: 48.58), controlPoint2: CGPoint(x: 153.11, y: 3.4))
        path.addCurve(to: CGPoint(x: 161.14, y: 53.81), controlPoint1: CGPoint(x: 190.16, y: 24.91), controlPoint2: CGPoint(x: 153.15, y: 34.22))
        path.addCurve(to: CGPoint(x: 150.36, y: 84.67), controlPoint1: CGPoint(x: 169.13, y: 73.4), controlPoint2: CGPoint(x: 146.68, y: 76.11))
        path.addCurve(to: CGPoint(x: 171.64, y: 126.87), controlPoint1: CGPoint(x: 154.03, y: 93.22), controlPoint2: CGPoint(x: 163.71, y: 107.96))
        path.addCurve(to: CGPoint(x: 146.2, y: 126.87), controlPoint1: CGPoint(x: 179.56, y: 145.78), controlPoint2: CGPoint(x: 155.19, y: 110.81))
        path.addCurve(to: CGPoint(x: 148.44, y: 167.84), controlPoint1: CGPoint(x: 137.2, y: 142.92), controlPoint2: CGPoint(x: 182.71, y: 155.42))
        path.addCurve(to: CGPoint(x: 93.14, y: 121.16), controlPoint1: CGPoint(x: 114.17, y: 180.26), controlPoint2: CGPoint(x: 113.23, y: 123.17))
        path.addCurve(to: CGPoint(x: 14.03, y: 162.16), controlPoint1: CGPoint(x: 73.04, y: 119.14), controlPoint2: CGPoint(x: 29.71, y: 189.6))
        path.addCurve(to: CGPoint(x: 51.64, y: 121.16), controlPoint1: CGPoint(x: -1.64, y: 134.71), controlPoint2: CGPoint(x: 41.97, y: 136.72))
        path.addCurve(to: CGPoint(x: 59.64, y: 82.66), controlPoint1: CGPoint(x: 61.3, y: 105.59), controlPoint2: CGPoint(x: 43.75, y: 76.75))
        path.addCurve(to: CGPoint(x: 20.64, y: 121.16), controlPoint1: CGPoint(x: 75.52, y: 88.56), controlPoint2: CGPoint(x: 10.9, y: 124.2))
        path.addCurve(to: CGPoint(x: 20.64, y: 108.66), controlPoint1: CGPoint(x: 30.38, y: 118.11), controlPoint2: CGPoint(x: 29.99, y: 126.78))
        path.addCurve(to: CGPoint(x: 20.64, y: 82.66), controlPoint1: CGPoint(x: 11.28, y: 90.53), controlPoint2: CGPoint(x: 45.48, y: 88.16))
        path.addCurve(to: CGPoint(x: 14.03, y: 53.81), controlPoint1: CGPoint(x: -4.21, y: 77.15), controlPoint2: CGPoint(x: -6.87, y: 81.32))
        path.addCurve(to: CGPoint(x: 14.03, y: 6.66), controlPoint1: CGPoint(x: 34.94, y: 26.31), controlPoint2: CGPoint(x: 3.79, y: 36.84))
        path.close()
        path.move(to: CGPoint(x: 14.03, y: 6.66))
        context.saveGState()
        context.translateBy(x: 6.86, y: 17.34)
        path.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        path.fill()
        path.lineWidth = 1
        UIColor.black.setStroke()
        path.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawVorbild2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Path
        let path = UIBezierPath()
        path.move(to: CGPoint(x: 43.96, y: 2))
        path.addCurve(to: CGPoint(x: 80.02, y: 189.5), controlPoint1: CGPoint(x: -3.08, y: -23), controlPoint2: CGPoint(x: 56.27, y: 194.73))
        path.addCurve(to: CGPoint(x: 168.96, y: 2), controlPoint1: CGPoint(x: 103.76, y: 184.27), controlPoint2: CGPoint(x: 150.44, y: -8.75))
        path.addCurve(to: CGPoint(x: 116.46, y: 60.66), controlPoint1: CGPoint(x: 187.49, y: 12.75), controlPoint2: CGPoint(x: 108.47, y: 41.07))
        path.addCurve(to: CGPoint(x: 158.46, y: 95.58), controlPoint1: CGPoint(x: 124.45, y: 80.25), controlPoint2: CGPoint(x: 154.79, y: 87.03))
        path.addCurve(to: CGPoint(x: 95.96, y: 89.5), controlPoint1: CGPoint(x: 162.14, y: 104.14), controlPoint2: CGPoint(x: 88.04, y: 70.59))
        path.addCurve(to: CGPoint(x: 137.76, y: 140), controlPoint1: CGPoint(x: 103.88, y: 108.41), controlPoint2: CGPoint(x: 146.76, y: 123.95))
        path.addCurve(to: CGPoint(x: 137.76, y: 174.68), controlPoint1: CGPoint(x: 128.77, y: 156.05), controlPoint2: CGPoint(x: 172.04, y: 162.26))
        path.addCurve(to: CGPoint(x: 61.92, y: 169.8), controlPoint1: CGPoint(x: 103.49, y: 187.11), controlPoint2: CGPoint(x: 82.02, y: 171.81))
        path.addCurve(to: CGPoint(x: 23.84, y: 163.28), controlPoint1: CGPoint(x: 41.83, y: 167.79), controlPoint2: CGPoint(x: 39.52, y: 190.73))
        path.addCurve(to: CGPoint(x: 3.36, y: 140), controlPoint1: CGPoint(x: 8.17, y: 135.83), controlPoint2: CGPoint(x: -6.3, y: 155.57))
        path.addCurve(to: CGPoint(x: 43.96, y: 133.71), controlPoint1: CGPoint(x: 13.02, y: 124.43), controlPoint2: CGPoint(x: 28.08, y: 127.8))
        path.addCurve(to: CGPoint(x: 89.76, y: 124.38), controlPoint1: CGPoint(x: 59.85, y: 139.62), controlPoint2: CGPoint(x: 80.02, y: 127.42))
        path.addCurve(to: CGPoint(x: 23.84, y: 109), controlPoint1: CGPoint(x: 99.5, y: 121.33), controlPoint2: CGPoint(x: 33.2, y: 127.13))
        path.addCurve(to: CGPoint(x: 89.76, y: 53.85), controlPoint1: CGPoint(x: 14.49, y: 90.87), controlPoint2: CGPoint(x: 114.61, y: 59.36))
        path.addCurve(to: CGPoint(x: 3.36, y: 60.66), controlPoint1: CGPoint(x: 64.91, y: 48.34), controlPoint2: CGPoint(x: -17.55, y: 88.16))
        path.addCurve(to: CGPoint(x: 43.96, y: 2), controlPoint1: CGPoint(x: 24.27, y: 33.15), controlPoint2: CGPoint(x: 91, y: 27))
        path.close()
        path.move(to: CGPoint(x: 43.96, y: 2))
        context.saveGState()
        context.translateBy(x: 17.54, y: 10.5)
        path.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        path.fill()
        path.lineWidth = 1
        UIColor.black.setStroke()
        path.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Icon Library
    
    class func imageOfAppicon() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 400, height: 400), false, 0)
        Graphics.drawAppicon()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfEnthalter2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        Graphics.drawEnthalter2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfZuschauer2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        Graphics.drawZuschauer2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPadawan2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        Graphics.drawPadawan2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMitspieler2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        Graphics.drawMitspieler2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMacher2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        Graphics.drawMacher2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfVorbild2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        Graphics.drawVorbild2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
